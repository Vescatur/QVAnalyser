from Library.Benchmarks.benchmark import Benchmark
from Library.Benchmarks.benchmark_model import BenchmarkModel
from Library.Benchmarks.benchmark_sequence import BenchmarkSequence
from Library.Benchmarks.benchmark_instance import BenchmarkInstance
from Library.Benchmarks.model_type import ModelType
from Library.Benchmarks.property_type import PropertyType
from Specific.Tools.Modest.modest_tool import ModestTool
from Specific.Tools.Storm.storm_tool import StormTool

# This class has been generated using 0Generate_BenchmarkFromQVBS.py
class QvbsBenchmark(Benchmark):
    def __init__(self):
        super().__init__()
        
        self.add_benchmark_instances()
        
        stormTool = StormTool()
        self.tools.append(stormTool)
        self.algorithms.append(stormTool.interval_iteration_sparse)
        
        modestTool = ModestTool()
        self.tools.append(modestTool)
        self.algorithms.append(modestTool.interval_iteration)
    
    def add_benchmark_instances(self):
        self.add_cluster_1()
        self.add_embedded_1()
        self.add_fms_1()
        self.add_hill_toggle_1()
        self.add_kanban_1()
        self.add_majority_1()
        self.add_mapk_cascade_1()
        self.add_p53_1()
        self.add_philosophers_1()
        self.add_philosophers_2()
        self.add_philosophers_3()
        self.add_philosophers_4()
        self.add_philosophers_5()
        self.add_philosophers_6()
        self.add_philosophers_7()
        self.add_polling_1()
        self.add_polling_2()
        self.add_polling_3()
        self.add_polling_4()
        self.add_polling_5()
        self.add_polling_6()
        self.add_polling_7()
        self.add_polling_8()
        self.add_polling_9()
        self.add_polling_10()
        self.add_polling_11()
        self.add_polling_12()
        self.add_polling_13()
        self.add_polling_14()
        self.add_polling_15()
        self.add_polling_16()
        self.add_polling_17()
        self.add_polling_18()
        self.add_speed_ind_1()
        self.add_tandem_1()
        self.add_toggle_switch_1()
        self.add_bluetooth_1()
        self.add_brp_1()
        self.add_coupon_1()
        self.add_coupon_2()
        self.add_coupon_3()
        self.add_coupon_4()
        self.add_crowds_1()
        self.add_egl_1()
        self.add_haddad_monmege_1()
        self.add_herman_1()
        self.add_herman_2()
        self.add_herman_3()
        self.add_herman_4()
        self.add_herman_5()
        self.add_herman_6()
        self.add_herman_7()
        self.add_herman_8()
        self.add_herman_9()
        self.add_herman_10()
        self.add_leader_sync_1()
        self.add_leader_sync_2()
        self.add_leader_sync_3()
        self.add_leader_sync_4()
        self.add_leader_sync_5()
        self.add_leader_sync_6()
        self.add_leader_sync_7()
        self.add_leader_sync_8()
        self.add_leader_sync_9()
        self.add_nand_1()
        self.add_oscillators_1()
        self.add_oscillators_2()
        self.add_oscillators_3()
        self.add_oscillators_4()
        self.add_oscillators_5()
        self.add_oscillators_6()
        self.add_oscillators_7()
        self.add_bitcoin_attack_1()
        self.add_breakdown_queues_1()
        self.add_cabinets_1()
        self.add_cabinets_2()
        self.add_cabinets_3()
        self.add_cabinets_4()
        self.add_cabinets_5()
        self.add_cabinets_6()
        self.add_cabinets_7()
        self.add_cabinets_8()
        self.add_cabinets_9()
        self.add_cabinets_10()
        self.add_cabinets_11()
        self.add_cabinets_12()
        self.add_cabinets_13()
        self.add_cabinets_14()
        self.add_cabinets_15()
        self.add_cabinets_16()
        self.add_cabinets_17()
        self.add_cabinets_18()
        self.add_dpm_1()
        self.add_erlang_1()
        self.add_flexible_manufacturing_1()
        self.add_flexible_manufacturing_2()
        self.add_flexible_manufacturing_3()
        self.add_ftpp_1()
        self.add_ftpp_2()
        self.add_ftpp_3()
        self.add_ftpp_4()
        self.add_ftpp_5()
        self.add_ftpp_6()
        self.add_ftpp_7()
        self.add_ftpp_8()
        self.add_ftpp_9()
        self.add_ftpp_10()
        self.add_ftpp_11()
        self.add_ftpp_12()
        self.add_ftpp_13()
        self.add_ftpp_14()
        self.add_ftpp_15()
        self.add_ftpp_16()
        self.add_ftwc_1()
        self.add_hecs_1()
        self.add_hecs_2()
        self.add_hecs_3()
        self.add_hecs_4()
        self.add_hecs_5()
        self.add_hecs_6()
        self.add_hecs_7()
        self.add_hecs_8()
        self.add_hecs_9()
        self.add_hecs_10()
        self.add_hecs_11()
        self.add_hecs_12()
        self.add_hecs_13()
        self.add_hecs_14()
        self.add_hecs_15()
        self.add_hecs_16()
        self.add_hecs_17()
        self.add_hecs_18()
        self.add_hecs_19()
        self.add_hecs_20()
        self.add_hecs_21()
        self.add_hecs_22()
        self.add_hecs_23()
        self.add_hecs_24()
        self.add_hecs_25()
        self.add_hecs_26()
        self.add_hecs_27()
        self.add_hecs_28()
        self.add_jobs_1()
        self.add_jobs_2()
        self.add_jobs_3()
        self.add_mcs_1()
        self.add_mcs_2()
        self.add_mcs_3()
        self.add_mcs_4()
        self.add_mcs_5()
        self.add_mcs_6()
        self.add_mcs_7()
        self.add_mcs_8()
        self.add_mcs_9()
        self.add_mcs_10()
        self.add_mcs_11()
        self.add_mcs_12()
        self.add_mcs_13()
        self.add_mcs_14()
        self.add_mcs_15()
        self.add_mcs_16()
        self.add_mcs_17()
        self.add_mcs_18()
        self.add_mcs_19()
        self.add_mcs_20()
        self.add_mcs_21()
        self.add_mcs_22()
        self.add_mcs_23()
        self.add_mcs_24()
        self.add_mcs_25()
        self.add_mcs_26()
        self.add_mcs_27()
        self.add_mcs_28()
        self.add_mcs_29()
        self.add_mcs_30()
        self.add_mcs_31()
        self.add_mcs_32()
        self.add_mcs_33()
        self.add_mcs_34()
        self.add_mcs_35()
        self.add_mcs_36()
        self.add_mcs_37()
        self.add_mcs_38()
        self.add_mcs_39()
        self.add_mcs_40()
        self.add_mcs_41()
        self.add_mcs_42()
        self.add_mcs_43()
        self.add_mcs_44()
        self.add_mcs_45()
        self.add_mcs_46()
        self.add_mcs_47()
        self.add_mcs_48()
        self.add_mcs_49()
        self.add_mcs_50()
        self.add_mcs_51()
        self.add_mcs_52()
        self.add_mcs_53()
        self.add_mcs_54()
        self.add_mcs_55()
        self.add_mcs_56()
        self.add_polling_system_1()
        self.add_readers_writers_1()
        self.add_readers_writers_2()
        self.add_readers_writers_3()
        self.add_readers_writers_4()
        self.add_reentrant_queues_1()
        self.add_sf_1()
        self.add_sf_2()
        self.add_sf_3()
        self.add_sf_4()
        self.add_sf_5()
        self.add_sf_6()
        self.add_sf_7()
        self.add_sf_8()
        self.add_sf_9()
        self.add_sf_10()
        self.add_sf_11()
        self.add_sf_12()
        self.add_sf_13()
        self.add_sf_14()
        self.add_sf_15()
        self.add_sf_16()
        self.add_sf_17()
        self.add_sf_18()
        self.add_sf_19()
        self.add_sf_20()
        self.add_sf_21()
        self.add_sf_22()
        self.add_sf_23()
        self.add_sf_24()
        self.add_sf_25()
        self.add_sf_26()
        self.add_sf_27()
        self.add_sf_28()
        self.add_sf_29()
        self.add_sf_30()
        self.add_sf_31()
        self.add_sf_32()
        self.add_sf_33()
        self.add_sms_1()
        self.add_sms_2()
        self.add_sms_3()
        self.add_sms_4()
        self.add_sms_5()
        self.add_sms_6()
        self.add_sms_7()
        self.add_sms_8()
        self.add_sms_9()
        self.add_sms_10()
        self.add_sms_11()
        self.add_sms_12()
        self.add_sms_13()
        self.add_sms_14()
        self.add_sms_15()
        self.add_sms_16()
        self.add_sms_17()
        self.add_sms_18()
        self.add_sms_19()
        self.add_sms_20()
        self.add_sms_21()
        self.add_sms_22()
        self.add_sms_23()
        self.add_sms_24()
        self.add_stream_1()
        self.add_vgs_1()
        self.add_vgs_2()
        self.add_beb_1()
        self.add_beb_2()
        self.add_beb_3()
        self.add_beb_4()
        self.add_blocksworld_1()
        self.add_blocksworld_2()
        self.add_blocksworld_3()
        self.add_blocksworld_4()
        self.add_boxworld_1()
        self.add_boxworld_2()
        self.add_boxworld_3()
        self.add_boxworld_4()
        self.add_boxworld_5()
        self.add_cdrive_1()
        self.add_cdrive_2()
        self.add_cdrive_3()
        self.add_cdrive_4()
        self.add_consensus_1()
        self.add_consensus_2()
        self.add_consensus_3()
        self.add_consensus_4()
        self.add_consensus_5()
        self.add_csma_1()
        self.add_csma_2()
        self.add_csma_3()
        self.add_csma_4()
        self.add_csma_5()
        self.add_csma_6()
        self.add_csma_7()
        self.add_csma_8()
        self.add_csma_9()
        self.add_eajs_1()
        self.add_eajs_2()
        self.add_eajs_3()
        self.add_eajs_4()
        self.add_eajs_5()
        self.add_echoring_1()
        self.add_elevators_1()
        self.add_elevators_2()
        self.add_elevators_3()
        self.add_elevators_4()
        self.add_exploding_blocksworld_1()
        self.add_exploding_blocksworld_2()
        self.add_exploding_blocksworld_3()
        self.add_exploding_blocksworld_4()
        self.add_firewire_1()
        self.add_firewire_2()
        self.add_firewire_abst_1()
        self.add_firewire_dl_1()
        self.add_ij_1()
        self.add_ij_2()
        self.add_ij_3()
        self.add_ij_4()
        self.add_ij_5()
        self.add_ij_6()
        self.add_pacman_1()
        self.add_philosophers_mdp_1()
        self.add_philosophers_mdp_2()
        self.add_philosophers_mdp_3()
        self.add_philosophers_mdp_4()
        self.add_pnueli_zuck_1()
        self.add_pnueli_zuck_2()
        self.add_pnueli_zuck_3()
        self.add_pnueli_zuck_4()
        self.add_rabin_1()
        self.add_rabin_2()
        self.add_rabin_3()
        self.add_random_predicates_1()
        self.add_random_predicates_2()
        self.add_random_predicates_3()
        self.add_random_predicates_4()
        self.add_rectangle_tireworld_1()
        self.add_rectangle_tireworld_2()
        self.add_rectangle_tireworld_3()
        self.add_resource_gathering_1()
        self.add_tireworld_1()
        self.add_tireworld_2()
        self.add_tireworld_3()
        self.add_tireworld_4()
        self.add_triangle_tireworld_1()
        self.add_triangle_tireworld_2()
        self.add_triangle_tireworld_3()
        self.add_triangle_tireworld_4()
        self.add_triangle_tireworld_5()
        self.add_wlan_1()
        self.add_wlan_2()
        self.add_wlan_3()
        self.add_wlan_4()
        self.add_wlan_5()
        self.add_wlan_6()
        self.add_wlan_7()
        self.add_wlan_dl_1()
        self.add_wlan_dl_2()
        self.add_wlan_dl_3()
        self.add_wlan_dl_4()
        self.add_wlan_dl_5()
        self.add_wlan_dl_6()
        self.add_wlan_dl_7()
        self.add_zenotravel_1()
        self.add_zenotravel_2()
        self.add_zenotravel_3()
        self.add_zenotravel_4()
        self.add_zeroconf_1()
        self.add_zeroconf_dl_1()
        self.add_brp_pta_1()
        self.add_csma_pta_1()
        self.add_csma_abst_pta_1()
        self.add_firewire_pta_1()
        self.add_firewire_abst_pta_1()
        self.add_repudiation_honest_1()
        self.add_repudiation_malicious_1()
        self.add_wlan_large_1()
        self.add_zeroconf_pta_1()
    
    def add_cluster_1(self):
        model = BenchmarkModel(self, "ctmc/cluster/cluster.jani","ctmc/cluster/cluster.props","ctmc/cluster/cluster.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 2, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 4, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 8, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 16, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 32, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 64, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 128, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 256, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "below_min", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "operational", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "premium_steady", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos1", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos2", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos3", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "qos4", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "repairs", PropertyType.UNSUPPORTED, {"N": 512, "T": 2000, "t": 20})
        BenchmarkInstance(sequence, {})
    
    def add_embedded_1(self):
        model = BenchmarkModel(self, "ctmc/embedded/embedded.jani","ctmc/embedded/embedded.props","ctmc/embedded/embedded.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 2, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 3, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 4, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 5, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 6, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 7, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators", PropertyType.REACHABILITY, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "actuators_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "danger_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "down_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "failure_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io", PropertyType.REACHABILITY, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "io_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main", PropertyType.REACHABILITY, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "main_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors", PropertyType.REACHABILITY, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sensors_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_T", PropertyType.UNSUPPORTED, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "up_time", PropertyType.EXPECTED_REWARD, {"MAX_COUNT": 8, "T": 12})
        BenchmarkInstance(sequence, {})
    
    def add_fms_1(self):
        model = BenchmarkModel(self, "ctmc/fms/fms.jani","ctmc/fms/fms.props","ctmc/fms/fms.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 9})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "productivity", PropertyType.UNSUPPORTED, {"n": 10})
        BenchmarkInstance(sequence, {})
    
    def add_hill_toggle_1(self):
        model = BenchmarkModel(self, "ctmc/hill-toggle/hill-toggle.jani","","", ModelType.CTMC,"PRISM-∞","infinite-state biological model")
        sequence = BenchmarkSequence(model, "Switching", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "RareEvent", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_kanban_1(self):
        model = BenchmarkModel(self, "ctmc/kanban/kanban.jani","ctmc/kanban/kanban.props","ctmc/kanban/kanban.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "throughput", PropertyType.UNSUPPORTED, {"t": 7})
        BenchmarkInstance(sequence, {})
    
    def add_majority_1(self):
        model = BenchmarkModel(self, "ctmc/majority/majority.jani","ctmc/majority/majority.props","ctmc/majority/majority.prism", ModelType.CTMC,"PRISM","biological model")
        sequence = BenchmarkSequence(model, "change_state", PropertyType.UNSUPPORTED, {"T": 2100})
        BenchmarkInstance(sequence, {})
    
    def add_mapk_cascade_1(self):
        model = BenchmarkModel(self, "ctmc/mapk_cascade/mapk_cascade.jani","ctmc/mapk_cascade/mapk_cascade.props","ctmc/mapk_cascade/mapk_cascade.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 1, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 1, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 1, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 2, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 2, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 2, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 3, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 3, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 3, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 4, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 4, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 4, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 5, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 5, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 5, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 6, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 6, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 6, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 7, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 7, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 7, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_T", PropertyType.UNSUPPORTED, {"N": 8, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "activated_time", PropertyType.EXPECTED_REWARD, {"N": 8, "T": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reactions", PropertyType.UNSUPPORTED, {"N": 8, "T": 30})
        BenchmarkInstance(sequence, {})
    
    def add_p53_1(self):
        model = BenchmarkModel(self, "ctmc/p53/p53.jani","","", ModelType.CTMC,"PRISM-∞","infinite-state biological model")
        sequence = BenchmarkSequence(model, "RareEvent1", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "RareEvent2", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "RareEvent3", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Steady1", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_1(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.4.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_2(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.12.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_3(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.16.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_4(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.20.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_5(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.24.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_6(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.28.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_7(self):
        model = BenchmarkModel(self, "ctmc/philosophers/philosophers.32.jani","","", ModelType.CTMC,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlock", PropertyType.REACHABILITY, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachDeadlockTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeDeadlock", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 1})
        BenchmarkInstance(sequence, {})
    
    def add_polling_1(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.3.jani","ctmc/polling/polling.props","ctmc/polling/polling.3.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_2(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.4.jani","ctmc/polling/polling.props","ctmc/polling/polling.4.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_3(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.5.jani","ctmc/polling/polling.props","ctmc/polling/polling.5.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_4(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.6.jani","ctmc/polling/polling.props","ctmc/polling/polling.6.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_5(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.7.jani","ctmc/polling/polling.props","ctmc/polling/polling.7.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_6(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.8.jani","ctmc/polling/polling.props","ctmc/polling/polling.8.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_7(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.9.jani","ctmc/polling/polling.props","ctmc/polling/polling.9.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_8(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.10.jani","ctmc/polling/polling.props","ctmc/polling/polling.10.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_9(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.11.jani","ctmc/polling/polling.props","ctmc/polling/polling.11.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_10(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.12.jani","ctmc/polling/polling.props","ctmc/polling/polling.12.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_11(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.13.jani","ctmc/polling/polling.props","ctmc/polling/polling.13.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_12(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.14.jani","ctmc/polling/polling.props","ctmc/polling/polling.14.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_13(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.15.jani","ctmc/polling/polling.props","ctmc/polling/polling.15.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_14(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.16.jani","ctmc/polling/polling.props","ctmc/polling/polling.16.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_15(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.17.jani","ctmc/polling/polling.props","ctmc/polling/polling.17.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_16(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.18.jani","ctmc/polling/polling.props","ctmc/polling/polling.18.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_17(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.19.jani","ctmc/polling/polling.props","ctmc/polling/polling.19.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_polling_18(self):
        model = BenchmarkModel(self, "ctmc/polling/polling.20.jani","ctmc/polling/polling.props","ctmc/polling/polling.20.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "s1", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "s1_before_s2", PropertyType.REACHABILITY, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "served", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "station1_polled", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "waiting", PropertyType.UNSUPPORTED, {"T": 16})
        BenchmarkInstance(sequence, {})
    
    def add_speed_ind_1(self):
        model = BenchmarkModel(self, "ctmc/speed-ind/speed-ind.jani","ctmc/speed-ind/speed-ind.props","ctmc/speed-ind/speed-ind.prism", ModelType.CTMC,"PRISM","biological model")
        sequence = BenchmarkSequence(model, "change_state", PropertyType.UNSUPPORTED, {"T": 2100})
        BenchmarkInstance(sequence, {})
    
    def add_tandem_1(self):
        model = BenchmarkModel(self, "ctmc/tandem/tandem.jani","ctmc/tandem/tandem.props","ctmc/tandem/tandem.prism", ModelType.CTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 5, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 5, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 5, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 5, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 5, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 7, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 7, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 7, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 7, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 7, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 15, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 15, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 15, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 15, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 15, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 31, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 31, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 31, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 31, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 31, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 63, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 63, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 63, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 63, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 63, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 127, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 127, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 127, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 127, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 127, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 255, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 255, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 255, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 255, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 255, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 511, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 511, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 511, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 511, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 511, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 1023, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 1023, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 1023, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 1023, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 1023, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 2047, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 2047, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 2047, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 2047, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 2047, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers", PropertyType.UNSUPPORTED, {"c": 4095, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "customers_T", PropertyType.UNSUPPORTED, {"c": 4095, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "first_queue", PropertyType.UNSUPPORTED, {"c": 4095, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "network", PropertyType.UNSUPPORTED, {"c": 4095, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "second_queue", PropertyType.UNSUPPORTED, {"c": 4095, "T": 1000, "t": 0.2})
        BenchmarkInstance(sequence, {})
    
    def add_toggle_switch_1(self):
        model = BenchmarkModel(self, "ctmc/toggle-switch/toggle-switch.jani","ctmc/toggle-switch/toggle-switch.props","ctmc/toggle-switch/toggle-switch.prism", ModelType.CTMC,"PRISM","biological model")
        sequence = BenchmarkSequence(model, "change_state", PropertyType.UNSUPPORTED, {"T": 2100})
        BenchmarkInstance(sequence, {})
    
    def add_bluetooth_1(self):
        model = BenchmarkModel(self, "dtmc/bluetooth/bluetooth.jani","dtmc/bluetooth/bluetooth.props","dtmc/bluetooth/bluetooth.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {"mrec": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {"mrec": 2})
        BenchmarkInstance(sequence, {})
    
    def add_brp_1(self):
        model = BenchmarkModel(self, "dtmc/brp/brp.jani","dtmc/brp/brp.props","dtmc/brp/brp.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 16, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 16, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 16, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 16, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 16, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 16, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 16, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 16, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 16, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 16, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 16, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 16, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 32, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 32, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 32, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 32, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 32, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 32, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 32, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 32, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 32, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 32, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 32, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 32, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 64, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 64, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 64, "MAX": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 64, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 64, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 64, "MAX": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 64, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 64, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 64, "MAX": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p1", PropertyType.REACHABILITY, {"N": 64, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p2", PropertyType.REACHABILITY, {"N": 64, "MAX": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "p4", PropertyType.REACHABILITY, {"N": 64, "MAX": 5})
        BenchmarkInstance(sequence, {})
    
    def add_coupon_1(self):
        model = BenchmarkModel(self, "dtmc/coupon/coupon.5-2.jani","","", ModelType.DTMC,"PGCL","classic probabilistic programming example")
        sequence = BenchmarkSequence(model, "collect_all", PropertyType.REACHABILITY, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_draws", PropertyType.EXPECTED_REWARD, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collect_all_bounded", PropertyType.UNSUPPORTED, {"B": 5})
        BenchmarkInstance(sequence, {})
    
    def add_coupon_2(self):
        model = BenchmarkModel(self, "dtmc/coupon/coupon.7-3.jani","","", ModelType.DTMC,"PGCL","classic probabilistic programming example")
        sequence = BenchmarkSequence(model, "collect_all", PropertyType.REACHABILITY, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_draws", PropertyType.EXPECTED_REWARD, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collect_all_bounded", PropertyType.UNSUPPORTED, {"B": 5})
        BenchmarkInstance(sequence, {})
    
    def add_coupon_3(self):
        model = BenchmarkModel(self, "dtmc/coupon/coupon.9-4.jani","","", ModelType.DTMC,"PGCL","classic probabilistic programming example")
        sequence = BenchmarkSequence(model, "collect_all", PropertyType.REACHABILITY, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_draws", PropertyType.EXPECTED_REWARD, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collect_all_bounded", PropertyType.UNSUPPORTED, {"B": 5})
        BenchmarkInstance(sequence, {})
    
    def add_coupon_4(self):
        model = BenchmarkModel(self, "dtmc/coupon/coupon.15-4.jani","","", ModelType.DTMC,"PGCL","classic probabilistic programming example")
        sequence = BenchmarkSequence(model, "collect_all", PropertyType.REACHABILITY, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_draws", PropertyType.EXPECTED_REWARD, {"B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collect_all_bounded", PropertyType.UNSUPPORTED, {"B": 5})
        BenchmarkInstance(sequence, {})
    
    def add_crowds_1(self):
        model = BenchmarkModel(self, "dtmc/crowds/crowds.jani","dtmc/crowds/crowds.props","dtmc/crowds/crowds.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 3, "CrowdSize": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 4, "CrowdSize": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 5, "CrowdSize": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 6, "CrowdSize": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 3, "CrowdSize": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 4, "CrowdSize": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 5, "CrowdSize": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 6, "CrowdSize": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 3, "CrowdSize": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 4, "CrowdSize": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 5, "CrowdSize": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 6, "CrowdSize": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 3, "CrowdSize": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 4, "CrowdSize": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 5, "CrowdSize": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "positive", PropertyType.REACHABILITY, {"TotalRuns": 6, "CrowdSize": 20})
        BenchmarkInstance(sequence, {})
    
    def add_egl_1(self):
        model = BenchmarkModel(self, "dtmc/egl/egl.jani","dtmc/egl/egl.props","dtmc/egl/egl.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 5, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 5, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 5, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 5, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 5, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 5, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 5, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 5, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 5, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 10, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 10, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 10, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 10, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 10, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 10, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 10, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 10, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 10, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 15, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 15, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 15, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 15, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 15, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 15, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 15, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 15, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 15, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 20, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 20, "L": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 20, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 20, "L": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 20, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 20, "L": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesA", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "messagesB", PropertyType.EXPECTED_REWARD, {"N": 20, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairA", PropertyType.REACHABILITY, {"N": 20, "L": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "unfairB", PropertyType.REACHABILITY, {"N": 20, "L": 8})
        BenchmarkInstance(sequence, {})
    
    def add_haddad_monmege_1(self):
        model = BenchmarkModel(self, "dtmc/haddad-monmege/haddad-monmege.jani","dtmc/haddad-monmege/haddad-monmege.prctl","dtmc/haddad-monmege/haddad-monmege.pm", ModelType.DTMC,"PRISM","adversarial example for value iteration")
        sequence = BenchmarkSequence(model, "target", PropertyType.REACHABILITY, {"N": 20, "p": 0.7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_steps", PropertyType.EXPECTED_STEPS, {"N": 20, "p": 0.7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "target", PropertyType.REACHABILITY, {"N": 100, "p": 0.7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_steps", PropertyType.EXPECTED_STEPS, {"N": 100, "p": 0.7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "target", PropertyType.REACHABILITY, {"N": 300, "p": 0.7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_steps", PropertyType.EXPECTED_STEPS, {"N": 300, "p": 0.7})
        BenchmarkInstance(sequence, {})
    
    def add_herman_1(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.3.jani","dtmc/herman/herman.props","dtmc/herman/herman.3.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_2(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.5.jani","dtmc/herman/herman.props","dtmc/herman/herman.5.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_3(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.7.jani","dtmc/herman/herman.props","dtmc/herman/herman.7.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_4(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.9.jani","dtmc/herman/herman.props","dtmc/herman/herman.9.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_5(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.11.jani","dtmc/herman/herman.props","dtmc/herman/herman.11.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_6(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.13.jani","dtmc/herman/herman.props","dtmc/herman/herman.13.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_7(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.15.jani","dtmc/herman/herman.props","dtmc/herman/herman.15.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_8(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.17.jani","dtmc/herman/herman.props","dtmc/herman/herman.17.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_9(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.19.jani","dtmc/herman/herman.props","dtmc/herman/herman.19.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_herman_10(self):
        model = BenchmarkModel(self, "dtmc/herman/herman.21.jani","dtmc/herman/herman.props","dtmc/herman/herman.21.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "steps", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_1(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.3-2.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.3-2.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_2(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.3-3.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.3-3.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_3(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.3-4.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.3-4.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_4(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.4-2.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.4-2.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_5(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.4-3.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.4-3.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_6(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.4-4.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.4-4.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_7(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.5-2.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.5-2.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_8(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.5-3.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.5-3.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_leader_sync_9(self):
        model = BenchmarkModel(self, "dtmc/leader_sync/leader_sync.5-4.jani","dtmc/leader_sync/leader_sync.props","dtmc/leader_sync/leader_sync.5-4.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "eventually_elected", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_nand_1(self):
        model = BenchmarkModel(self, "dtmc/nand/nand.jani","dtmc/nand/nand.props","dtmc/nand/nand.prism", ModelType.DTMC,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 20, "K": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 20, "K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 20, "K": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 20, "K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 40, "K": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 40, "K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 40, "K": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 40, "K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 60, "K": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 60, "K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 60, "K": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "reliable", PropertyType.REACHABILITY, {"N": 60, "K": 4})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_1(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.3-6-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.3-6-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_2(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.6-6-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.6-6-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_3(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.6-8-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.6-8-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_4(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.6-10-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.6-10-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_5(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.7-10-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.7-10-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_6(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.8-8-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.8-8-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_oscillators_7(self):
        model = BenchmarkModel(self, "dtmc/oscillators/oscillators.8-10-0.1-1.jani","dtmc/oscillators/oscillators.props","dtmc/oscillators/oscillators.8-10-0.1-1.prism", ModelType.DTMC,"PRISM","large fan-out from initial state")
        sequence = BenchmarkSequence(model, "time_to_synch", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "power_consumption", PropertyType.EXPECTED_REWARD, {"mu": 0.1, "lambda": 1.0})
        BenchmarkInstance(sequence, {})
    
    def add_bitcoin_attack_1(self):
        model = BenchmarkModel(self, "ma/bitcoin-attack/bitcoin-attack.jani","","", ModelType.MA,"Modest","")
        sequence = BenchmarkSequence(model, "T_MWinMin", PropertyType.EXPECTED_TIME, {"MALICIOUS": 20, "CD": 6})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_MWinMax", PropertyType.UNSUPPORTED, {"MALICIOUS": 20, "CD": 6})
        BenchmarkInstance(sequence, {})
    
    def add_breakdown_queues_1(self):
        model = BenchmarkModel(self, "ma/breakdown-queues/breakdown-queues.jani","","", ModelType.MA,"Modest","")
        sequence = BenchmarkSequence(model, "Min", PropertyType.REACHABILITY, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Max", PropertyType.REACHABILITY, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Min", PropertyType.REACHABILITY, {"K": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Max", PropertyType.REACHABILITY, {"K": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Min", PropertyType.REACHABILITY, {"K": 32})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Max", PropertyType.REACHABILITY, {"K": 32})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Min", PropertyType.REACHABILITY, {"K": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Max", PropertyType.REACHABILITY, {"K": 64})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_1(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.2-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_2(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.2-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_3(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.2-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_4(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.2-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_5(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.2-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_6(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.2-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_7(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.3-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_8(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.3-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_9(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.3-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_10(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.3-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_11(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.3-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_12(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.3-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_13(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.4-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_14(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.4-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_15(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.4-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_16(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.4-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_17(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.4-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_cabinets_18(self):
        model = BenchmarkModel(self, "ma/cabinets/cabinets.4-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_dpm_1(self):
        model = BenchmarkModel(self, "ma/dpm/dpm.jani","","", ModelType.MA,"Modest","scalable nondeterministic queueing system")
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 4, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 6, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 6, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 6, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 8, "TIME_BOUND": 25})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 4, "C": 8, "TIME_BOUND": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 6, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 6, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 6, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 8, "C": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 8, "C": 6, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueuesFull", PropertyType.REACHABILITY, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFull", PropertyType.REACHABILITY, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminQueue1Full", PropertyType.REACHABILITY, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueue1Full", PropertyType.REACHABILITY, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminQueuesFull", PropertyType.EXPECTED_TIME, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxQueuesFullBound", PropertyType.UNSUPPORTED, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxQueuesFull", PropertyType.UNSUPPORTED, {"N": 8, "C": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
    
    def add_erlang_1(self):
        model = BenchmarkModel(self, "ma/erlang/erlang.jani","","", ModelType.MA,"Modest","scalable sanity check model")
        sequence = BenchmarkSequence(model, "PminReach", PropertyType.REACHABILITY, {"K": 10, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminReach", PropertyType.EXPECTED_TIME, {"K": 10, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxReachBound", PropertyType.UNSUPPORTED, {"K": 10, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxNotReach", PropertyType.UNSUPPORTED, {"K": 10, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminReach", PropertyType.REACHABILITY, {"K": 5000, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminReach", PropertyType.EXPECTED_TIME, {"K": 5000, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxReachBound", PropertyType.UNSUPPORTED, {"K": 5000, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxNotReach", PropertyType.UNSUPPORTED, {"K": 5000, "R": 10, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminReach", PropertyType.REACHABILITY, {"K": 5000, "R": 100, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminReach", PropertyType.EXPECTED_TIME, {"K": 5000, "R": 100, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxReachBound", PropertyType.UNSUPPORTED, {"K": 5000, "R": 100, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxNotReach", PropertyType.UNSUPPORTED, {"K": 5000, "R": 100, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PminReach", PropertyType.REACHABILITY, {"K": 5000, "R": 100, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminReach", PropertyType.EXPECTED_TIME, {"K": 5000, "R": 100, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxReachBound", PropertyType.UNSUPPORTED, {"K": 5000, "R": 100, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxNotReach", PropertyType.UNSUPPORTED, {"K": 5000, "R": 100, "TIME_BOUND": 50})
        BenchmarkInstance(sequence, {})
    
    def add_flexible_manufacturing_1(self):
        model = BenchmarkModel(self, "ma/flexible-manufacturing/flexible-manufacturing.3.jani","","", ModelType.MA,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "M2Fail_S", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_S", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M2Fail_E", PropertyType.EXPECTED_TIME, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_E", PropertyType.EXPECTED_TIME, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M2Fail_Pb", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_Pb", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
    
    def add_flexible_manufacturing_2(self):
        model = BenchmarkModel(self, "ma/flexible-manufacturing/flexible-manufacturing.9.jani","","", ModelType.MA,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "M2Fail_S", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_S", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M2Fail_E", PropertyType.EXPECTED_TIME, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_E", PropertyType.EXPECTED_TIME, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M2Fail_Pb", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_Pb", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
    
    def add_flexible_manufacturing_3(self):
        model = BenchmarkModel(self, "ma/flexible-manufacturing/flexible-manufacturing.21.jani","","", ModelType.MA,"GreatSPN","small symbolic representation")
        sequence = BenchmarkSequence(model, "M2Fail_S", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_S", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M2Fail_E", PropertyType.EXPECTED_TIME, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_E", PropertyType.EXPECTED_TIME, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M2Fail_Pb", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "M3Fail_Pb", PropertyType.UNSUPPORTED, {"T": 1})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_1(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.1-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_2(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.1-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_3(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.1-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_4(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.1-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_5(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.2-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_6(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.2-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_7(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.2-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_8(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.2-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_9(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.3-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_10(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.3-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_11(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.3-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_12(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.3-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_13(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.4-1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_14(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.4-1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_15(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.4-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftpp_16(self):
        model = BenchmarkModel(self, "ma/ftpp/ftpp.4-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_ftwc_1(self):
        model = BenchmarkModel(self, "ma/ftwc/ftwc.jani","","", ModelType.MA,"Modest","fault-tolerant queueing system")
        sequence = BenchmarkSequence(model, "ReachMinIsOne", PropertyType.REACHABILITY, {"N": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TimeMin", PropertyType.EXPECTED_TIME, {"N": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TimeMax", PropertyType.EXPECTED_TIME, {"N": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxReachBound", PropertyType.UNSUPPORTED, {"N": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxReach", PropertyType.UNSUPPORTED, {"N": 4, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "ReachMinIsOne", PropertyType.REACHABILITY, {"N": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TimeMin", PropertyType.EXPECTED_TIME, {"N": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TimeMax", PropertyType.EXPECTED_TIME, {"N": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxReachBound", PropertyType.UNSUPPORTED, {"N": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxReach", PropertyType.UNSUPPORTED, {"N": 8, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_1(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-1-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_2(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-2-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_3(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-2-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_4(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-3-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_5(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-3-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_6(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-3-3.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_7(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-4-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_8(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-4-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_9(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-4-3.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_10(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-4-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_11(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-5-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_12(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-5-5.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_13(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-6-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_14(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-6-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_15(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-7-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_16(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-7-7.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_17(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-8-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_18(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.false-8-8.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_19(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-1-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_20(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-2-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_21(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-2-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_22(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-3-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_23(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-3-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_24(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-3-3.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_25(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-4-1.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_26(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-4-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_27(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-4-3.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_hecs_28(self):
        model = BenchmarkModel(self, "ma/hecs/hecs.true-4-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_jobs_1(self):
        model = BenchmarkModel(self, "ma/jobs/jobs.5-2.jani","","", ModelType.MA,"PRISM-MA","stochastic scheduling problem")
        sequence = BenchmarkSequence(model, "completiontime", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "avgtime", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prhalfdone", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_jobs_2(self):
        model = BenchmarkModel(self, "ma/jobs/jobs.10-3.jani","","", ModelType.MA,"PRISM-MA","stochastic scheduling problem")
        sequence = BenchmarkSequence(model, "completiontime", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "avgtime", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prhalfdone", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_jobs_3(self):
        model = BenchmarkModel(self, "ma/jobs/jobs.15-3.jani","","", ModelType.MA,"PRISM-MA","stochastic scheduling problem")
        sequence = BenchmarkSequence(model, "completiontime", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "avgtime", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prhalfdone", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_1(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-10-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_2(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-10-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_3(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-11-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_4(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-11-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_5(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-12-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_6(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-12-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_7(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-13-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_8(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-13-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_9(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-14-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_10(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-14-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_11(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_12(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_13(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_14(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_15(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_16(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_17(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-5-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_18(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-5-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_19(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-6-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_20(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-6-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_21(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-7-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_22(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-7-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_23(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-8-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_24(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-8-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_25(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-9-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_26(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.1-1-9-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_27(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-1-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_28(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-1-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_29(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-1-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_30(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-1-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_31(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-1-4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_32(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-1-4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_33(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-2-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_34(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-2-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_35(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-2-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_36(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-2-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_37(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-2-4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_38(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.2-2-4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_39(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-1-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_40(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-1-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_41(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-1-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_42(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-1-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_43(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-1-4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_44(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-1-4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_45(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-2-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_46(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-2-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_47(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-2-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_48(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-2-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_49(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-2-4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_50(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-2-4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_51(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-3-2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_52(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-3-2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_53(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-3-3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_54(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-3-3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_55(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-3-4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_mcs_56(self):
        model = BenchmarkModel(self, "ma/mcs/mcs.3-3-4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_polling_system_1(self):
        model = BenchmarkModel(self, "ma/polling-system/polling-system.jani","","", ModelType.MA,"Modest","small nondeterministic queueing system")
        sequence = BenchmarkSequence(model, "PminBothFullIsOne", PropertyType.REACHABILITY, {"JOB_TYPES": 3, "C": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminBothFull", PropertyType.EXPECTED_TIME, {"JOB_TYPES": 3, "C": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TmaxBothFull", PropertyType.EXPECTED_TIME, {"JOB_TYPES": 3, "C": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxBothFullBound", PropertyType.UNSUPPORTED, {"JOB_TYPES": 3, "C": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxBothFull", PropertyType.UNSUPPORTED, {"JOB_TYPES": 3, "C": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
    
    def add_readers_writers_1(self):
        model = BenchmarkModel(self, "ma/readers-writers/readers-writers.5.jani","","", ModelType.MA,"GreatSPN","standard GSPN example")
        sequence = BenchmarkSequence(model, "pr_many_requests", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_time_many_requests", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_network", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prtb_many_requests", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_readers_writers_2(self):
        model = BenchmarkModel(self, "ma/readers-writers/readers-writers.20.jani","","", ModelType.MA,"GreatSPN","standard GSPN example")
        sequence = BenchmarkSequence(model, "pr_many_requests", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_time_many_requests", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_network", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prtb_many_requests", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_readers_writers_3(self):
        model = BenchmarkModel(self, "ma/readers-writers/readers-writers.35.jani","","", ModelType.MA,"GreatSPN","standard GSPN example")
        sequence = BenchmarkSequence(model, "pr_many_requests", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_time_many_requests", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_network", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prtb_many_requests", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_readers_writers_4(self):
        model = BenchmarkModel(self, "ma/readers-writers/readers-writers.40.jani","","", ModelType.MA,"GreatSPN","standard GSPN example")
        sequence = BenchmarkSequence(model, "pr_many_requests", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_time_many_requests", PropertyType.EXPECTED_TIME, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_network", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prtb_many_requests", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_reentrant_queues_1(self):
        model = BenchmarkModel(self, "ma/reentrant-queues/reentrant-queues.jani","","", ModelType.MA,"Modest","asymmetric nondeterministic queueing system")
        sequence = BenchmarkSequence(model, "PminBothQueuesFullIsOne", PropertyType.REACHABILITY, {"JOB_TYPES": 3, "C_LEFT": 3, "C_RIGHT": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TminBothQueuesFull", PropertyType.EXPECTED_TIME, {"JOB_TYPES": 3, "C_LEFT": 3, "C_RIGHT": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "TmaxBothQueuesFull", PropertyType.EXPECTED_TIME, {"JOB_TYPES": 3, "C_LEFT": 3, "C_RIGHT": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "PmaxBothQueuesFullBound", PropertyType.UNSUPPORTED, {"JOB_TYPES": 3, "C_LEFT": 3, "C_RIGHT": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "SmaxBothQueuesFull", PropertyType.UNSUPPORTED, {"JOB_TYPES": 3, "C_LEFT": 3, "C_RIGHT": 3, "TIME_BOUND": 5})
        BenchmarkInstance(sequence, {})
    
    def add_sf_1(self):
        model = BenchmarkModel(self, "ma/sf/sf.1-10.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_2(self):
        model = BenchmarkModel(self, "ma/sf/sf.1-12.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_3(self):
        model = BenchmarkModel(self, "ma/sf/sf.1-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_4(self):
        model = BenchmarkModel(self, "ma/sf/sf.1-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_5(self):
        model = BenchmarkModel(self, "ma/sf/sf.1-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_6(self):
        model = BenchmarkModel(self, "ma/sf/sf.1-8.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_7(self):
        model = BenchmarkModel(self, "ma/sf/sf.2-10.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_8(self):
        model = BenchmarkModel(self, "ma/sf/sf.2-12.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_9(self):
        model = BenchmarkModel(self, "ma/sf/sf.2-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_10(self):
        model = BenchmarkModel(self, "ma/sf/sf.2-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_11(self):
        model = BenchmarkModel(self, "ma/sf/sf.2-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_12(self):
        model = BenchmarkModel(self, "ma/sf/sf.2-8.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_13(self):
        model = BenchmarkModel(self, "ma/sf/sf.3-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_14(self):
        model = BenchmarkModel(self, "ma/sf/sf.3-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_15(self):
        model = BenchmarkModel(self, "ma/sf/sf.3-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_16(self):
        model = BenchmarkModel(self, "ma/sf/sf.4-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_17(self):
        model = BenchmarkModel(self, "ma/sf/sf.4-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_18(self):
        model = BenchmarkModel(self, "ma/sf/sf.4-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_19(self):
        model = BenchmarkModel(self, "ma/sf/sf.5-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_20(self):
        model = BenchmarkModel(self, "ma/sf/sf.5-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_21(self):
        model = BenchmarkModel(self, "ma/sf/sf.5-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_22(self):
        model = BenchmarkModel(self, "ma/sf/sf.6-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_23(self):
        model = BenchmarkModel(self, "ma/sf/sf.6-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_24(self):
        model = BenchmarkModel(self, "ma/sf/sf.6-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_25(self):
        model = BenchmarkModel(self, "ma/sf/sf.7-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_26(self):
        model = BenchmarkModel(self, "ma/sf/sf.7-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_27(self):
        model = BenchmarkModel(self, "ma/sf/sf.7-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_28(self):
        model = BenchmarkModel(self, "ma/sf/sf.8-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_29(self):
        model = BenchmarkModel(self, "ma/sf/sf.8-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_30(self):
        model = BenchmarkModel(self, "ma/sf/sf.8-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_31(self):
        model = BenchmarkModel(self, "ma/sf/sf.9-2.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_32(self):
        model = BenchmarkModel(self, "ma/sf/sf.9-4.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sf_33(self):
        model = BenchmarkModel(self, "ma/sf/sf.9-6.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_1(self):
        model = BenchmarkModel(self, "ma/sms/sms.1-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_2(self):
        model = BenchmarkModel(self, "ma/sms/sms.1-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_3(self):
        model = BenchmarkModel(self, "ma/sms/sms.10-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_4(self):
        model = BenchmarkModel(self, "ma/sms/sms.10-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_5(self):
        model = BenchmarkModel(self, "ma/sms/sms.11-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_6(self):
        model = BenchmarkModel(self, "ma/sms/sms.11-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_7(self):
        model = BenchmarkModel(self, "ma/sms/sms.12-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_8(self):
        model = BenchmarkModel(self, "ma/sms/sms.12-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_9(self):
        model = BenchmarkModel(self, "ma/sms/sms.2-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_10(self):
        model = BenchmarkModel(self, "ma/sms/sms.2-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_11(self):
        model = BenchmarkModel(self, "ma/sms/sms.3-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_12(self):
        model = BenchmarkModel(self, "ma/sms/sms.3-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_13(self):
        model = BenchmarkModel(self, "ma/sms/sms.4-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_14(self):
        model = BenchmarkModel(self, "ma/sms/sms.4-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_15(self):
        model = BenchmarkModel(self, "ma/sms/sms.5-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_16(self):
        model = BenchmarkModel(self, "ma/sms/sms.5-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_17(self):
        model = BenchmarkModel(self, "ma/sms/sms.6-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_18(self):
        model = BenchmarkModel(self, "ma/sms/sms.6-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_19(self):
        model = BenchmarkModel(self, "ma/sms/sms.7-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_20(self):
        model = BenchmarkModel(self, "ma/sms/sms.7-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_21(self):
        model = BenchmarkModel(self, "ma/sms/sms.8-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_22(self):
        model = BenchmarkModel(self, "ma/sms/sms.8-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_23(self):
        model = BenchmarkModel(self, "ma/sms/sms.9-false.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_sms_24(self):
        model = BenchmarkModel(self, "ma/sms/sms.9-true.jani","","", ModelType.MA,"Galileo","")
        sequence = BenchmarkSequence(model, "Unreliability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Unavailability", PropertyType.UNSUPPORTED, {})
        BenchmarkInstance(sequence, {})
    
    def add_stream_1(self):
        model = BenchmarkModel(self, "ma/stream/stream.jani","","", ModelType.MA,"PRISM-MA","simple scalable planning benchmark")
        sequence = BenchmarkSequence(model, "exp_buffertime", PropertyType.EXPECTED_REWARD, {"N": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_restarts", PropertyType.EXPECTED_REWARD, {"N": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun", PropertyType.REACHABILITY, {"N": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun_tb", PropertyType.UNSUPPORTED, {"N": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_buffertime", PropertyType.EXPECTED_REWARD, {"N": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_restarts", PropertyType.EXPECTED_REWARD, {"N": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun", PropertyType.REACHABILITY, {"N": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun_tb", PropertyType.UNSUPPORTED, {"N": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_buffertime", PropertyType.EXPECTED_REWARD, {"N": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_restarts", PropertyType.EXPECTED_REWARD, {"N": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun", PropertyType.REACHABILITY, {"N": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun_tb", PropertyType.UNSUPPORTED, {"N": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_buffertime", PropertyType.EXPECTED_REWARD, {"N": 1000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "exp_restarts", PropertyType.EXPECTED_REWARD, {"N": 1000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun", PropertyType.REACHABILITY, {"N": 1000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "pr_underrun_tb", PropertyType.UNSUPPORTED, {"N": 1000})
        BenchmarkInstance(sequence, {})
    
    def add_vgs_1(self):
        model = BenchmarkModel(self, "ma/vgs/vgs.4.jani","","", ModelType.MA,"Galileo","industrial case study")
        sequence = BenchmarkSequence(model, "MaxPrReachFailed", PropertyType.REACHABILITY, {"TIME_BOUND": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachFailedTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeFailed", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 10000})
        BenchmarkInstance(sequence, {})
    
    def add_vgs_2(self):
        model = BenchmarkModel(self, "ma/vgs/vgs.5.jani","","", ModelType.MA,"Galileo","industrial case study")
        sequence = BenchmarkSequence(model, "MaxPrReachFailed", PropertyType.REACHABILITY, {"TIME_BOUND": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxPrReachFailedTB", PropertyType.UNSUPPORTED, {"TIME_BOUND": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinExpTimeFailed", PropertyType.EXPECTED_TIME, {"TIME_BOUND": 10000})
        BenchmarkInstance(sequence, {})
    
    def add_beb_1(self):
        model = BenchmarkModel(self, "mdp/beb/beb.3-4.jani","","", ModelType.MDP,"Modest","")
        sequence = BenchmarkSequence(model, "LineSeized", PropertyType.REACHABILITY, {"N": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "GaveUp", PropertyType.REACHABILITY, {"N": 3})
        BenchmarkInstance(sequence, {})
    
    def add_beb_2(self):
        model = BenchmarkModel(self, "mdp/beb/beb.4-8.jani","","", ModelType.MDP,"Modest","")
        sequence = BenchmarkSequence(model, "LineSeized", PropertyType.REACHABILITY, {"N": 7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "GaveUp", PropertyType.REACHABILITY, {"N": 7})
        BenchmarkInstance(sequence, {})
    
    def add_beb_3(self):
        model = BenchmarkModel(self, "mdp/beb/beb.5-16.jani","","", ModelType.MDP,"Modest","")
        sequence = BenchmarkSequence(model, "LineSeized", PropertyType.REACHABILITY, {"N": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "GaveUp", PropertyType.REACHABILITY, {"N": 15})
        BenchmarkInstance(sequence, {})
    
    def add_beb_4(self):
        model = BenchmarkModel(self, "mdp/beb/beb.6-16.jani","","", ModelType.MDP,"Modest","")
        sequence = BenchmarkSequence(model, "LineSeized", PropertyType.REACHABILITY, {"N": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "GaveUp", PropertyType.REACHABILITY, {"N": 15})
        BenchmarkInstance(sequence, {})
    
    def add_blocksworld_1(self):
        model = BenchmarkModel(self, "mdp/blocksworld/blocksworld.5.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_blocksworld_2(self):
        model = BenchmarkModel(self, "mdp/blocksworld/blocksworld.10.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_blocksworld_3(self):
        model = BenchmarkModel(self, "mdp/blocksworld/blocksworld.14.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_blocksworld_4(self):
        model = BenchmarkModel(self, "mdp/blocksworld/blocksworld.18.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_boxworld_1(self):
        model = BenchmarkModel(self, "mdp/boxworld/boxworld.10-5.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_boxworld_2(self):
        model = BenchmarkModel(self, "mdp/boxworld/boxworld.10-10.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_boxworld_3(self):
        model = BenchmarkModel(self, "mdp/boxworld/boxworld.15-10.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_boxworld_4(self):
        model = BenchmarkModel(self, "mdp/boxworld/boxworld.15-15.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_boxworld_5(self):
        model = BenchmarkModel(self, "mdp/boxworld/boxworld.20-20.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_cdrive_1(self):
        model = BenchmarkModel(self, "mdp/cdrive/cdrive.2.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_cdrive_2(self):
        model = BenchmarkModel(self, "mdp/cdrive/cdrive.3.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_cdrive_3(self):
        model = BenchmarkModel(self, "mdp/cdrive/cdrive.6.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_cdrive_4(self):
        model = BenchmarkModel(self, "mdp/cdrive/cdrive.10.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_consensus_1(self):
        model = BenchmarkModel(self, "mdp/consensus/consensus.2.jani","mdp/consensus/consensus.props","mdp/consensus/consensus.2.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 16})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 16})
        BenchmarkInstance(sequence, {})
    
    def add_consensus_2(self):
        model = BenchmarkModel(self, "mdp/consensus/consensus.4.jani","mdp/consensus/consensus.props","mdp/consensus/consensus.4.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 4})
        BenchmarkInstance(sequence, {})
    
    def add_consensus_3(self):
        model = BenchmarkModel(self, "mdp/consensus/consensus.6.jani","mdp/consensus/consensus.props","mdp/consensus/consensus.6.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
    
    def add_consensus_4(self):
        model = BenchmarkModel(self, "mdp/consensus/consensus.8.jani","mdp/consensus/consensus.props","mdp/consensus/consensus.8.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
    
    def add_consensus_5(self):
        model = BenchmarkModel(self, "mdp/consensus/consensus.10.jani","mdp/consensus/consensus.props","mdp/consensus/consensus.10.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "c1", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "c2", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "disagree", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_max", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "steps_min", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
    
    def add_csma_1(self):
        model = BenchmarkModel(self, "mdp/csma/csma.2-2.jani","mdp/csma/csma.props","mdp/csma/csma.2-2.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_2(self):
        model = BenchmarkModel(self, "mdp/csma/csma.2-4.jani","mdp/csma/csma.props","mdp/csma/csma.2-4.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_3(self):
        model = BenchmarkModel(self, "mdp/csma/csma.2-6.jani","mdp/csma/csma.props","mdp/csma/csma.2-6.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_4(self):
        model = BenchmarkModel(self, "mdp/csma/csma.3-2.jani","mdp/csma/csma.props","mdp/csma/csma.3-2.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_5(self):
        model = BenchmarkModel(self, "mdp/csma/csma.3-4.jani","mdp/csma/csma.props","mdp/csma/csma.3-4.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_6(self):
        model = BenchmarkModel(self, "mdp/csma/csma.3-6.jani","mdp/csma/csma.props","mdp/csma/csma.3-6.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_7(self):
        model = BenchmarkModel(self, "mdp/csma/csma.4-2.jani","mdp/csma/csma.props","mdp/csma/csma.4-2.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_8(self):
        model = BenchmarkModel(self, "mdp/csma/csma.4-4.jani","mdp/csma/csma.props","mdp/csma/csma.4-4.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_csma_9(self):
        model = BenchmarkModel(self, "mdp/csma/csma.4-6.jani","mdp/csma/csma.props","mdp/csma/csma.4-6.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "all_before_max", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "all_before_min", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "some_before", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {})
        BenchmarkInstance(sequence, {})
    
    def add_eajs_1(self):
        model = BenchmarkModel(self, "mdp/eajs/eajs.2.jani","mdp/eajs/eajs.props","mdp/eajs/eajs.2.prism", ModelType.MDP,"PRISM","reward-bounded properties")
        sequence = BenchmarkSequence(model, "ExpUtil", PropertyType.EXPECTED_REWARD, {"energy_capacity": 100, "B": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "ProbUtil", PropertyType.UNSUPPORTED, {"energy_capacity": 100, "B": 5})
        BenchmarkInstance(sequence, {})
    
    def add_eajs_2(self):
        model = BenchmarkModel(self, "mdp/eajs/eajs.3.jani","mdp/eajs/eajs.props","mdp/eajs/eajs.3.prism", ModelType.MDP,"PRISM","reward-bounded properties")
        sequence = BenchmarkSequence(model, "ExpUtil", PropertyType.EXPECTED_REWARD, {"energy_capacity": 150, "B": 7})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "ProbUtil", PropertyType.UNSUPPORTED, {"energy_capacity": 150, "B": 7})
        BenchmarkInstance(sequence, {})
    
    def add_eajs_3(self):
        model = BenchmarkModel(self, "mdp/eajs/eajs.4.jani","mdp/eajs/eajs.props","mdp/eajs/eajs.4.prism", ModelType.MDP,"PRISM","reward-bounded properties")
        sequence = BenchmarkSequence(model, "ExpUtil", PropertyType.EXPECTED_REWARD, {"energy_capacity": 200, "B": 9})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "ProbUtil", PropertyType.UNSUPPORTED, {"energy_capacity": 200, "B": 9})
        BenchmarkInstance(sequence, {})
    
    def add_eajs_4(self):
        model = BenchmarkModel(self, "mdp/eajs/eajs.5.jani","mdp/eajs/eajs.props","mdp/eajs/eajs.5.prism", ModelType.MDP,"PRISM","reward-bounded properties")
        sequence = BenchmarkSequence(model, "ExpUtil", PropertyType.EXPECTED_REWARD, {"energy_capacity": 250, "B": 11})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "ProbUtil", PropertyType.UNSUPPORTED, {"energy_capacity": 250, "B": 11})
        BenchmarkInstance(sequence, {})
    
    def add_eajs_5(self):
        model = BenchmarkModel(self, "mdp/eajs/eajs.6.jani","mdp/eajs/eajs.props","mdp/eajs/eajs.6.prism", ModelType.MDP,"PRISM","reward-bounded properties")
        sequence = BenchmarkSequence(model, "ExpUtil", PropertyType.EXPECTED_REWARD, {"energy_capacity": 300, "B": 13})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "ProbUtil", PropertyType.UNSUPPORTED, {"energy_capacity": 300, "B": 13})
        BenchmarkInstance(sequence, {})
    
    def add_echoring_1(self):
        model = BenchmarkModel(self, "mdp/echoring/echoring.jani","","", ModelType.MDP,"Modest","industrial protocol, spurious nondeterminism")
        sequence = BenchmarkSequence(model, "MinFailed", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline1", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline1", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline2", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline2", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline3", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline3", PropertyType.REACHABILITY, {"ITERATIONS": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinFailed", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline1", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline1", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline2", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline2", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline3", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline3", PropertyType.REACHABILITY, {"ITERATIONS": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinFailed", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline1", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline1", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline2", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline2", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MinOffline3", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "MaxOffline3", PropertyType.REACHABILITY, {"ITERATIONS": 100})
        BenchmarkInstance(sequence, {})
    
    def add_elevators_1(self):
        model = BenchmarkModel(self, "mdp/elevators/elevators.a-3-3.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_elevators_2(self):
        model = BenchmarkModel(self, "mdp/elevators/elevators.b-3-3.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_elevators_3(self):
        model = BenchmarkModel(self, "mdp/elevators/elevators.a-11-9.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_elevators_4(self):
        model = BenchmarkModel(self, "mdp/elevators/elevators.b-11-9.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_exploding_blocksworld_1(self):
        model = BenchmarkModel(self, "mdp/exploding-blocksworld/exploding-blocksworld.5.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_exploding_blocksworld_2(self):
        model = BenchmarkModel(self, "mdp/exploding-blocksworld/exploding-blocksworld.10.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_exploding_blocksworld_3(self):
        model = BenchmarkModel(self, "mdp/exploding-blocksworld/exploding-blocksworld.15.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_exploding_blocksworld_4(self):
        model = BenchmarkModel(self, "mdp/exploding-blocksworld/exploding-blocksworld.17.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_firewire_1(self):
        model = BenchmarkModel(self, "mdp/firewire/firewire.false.jani","mdp/firewire/firewire.false.props","mdp/firewire/firewire.false.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
    
    def add_firewire_2(self):
        model = BenchmarkModel(self, "mdp/firewire/firewire.true.jani","mdp/firewire/firewire.true.props","mdp/firewire/firewire.true.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_sending", PropertyType.EXPECTED_REWARD, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
    
    def add_firewire_abst_1(self):
        model = BenchmarkModel(self, "mdp/firewire_abst/firewire_abst.jani","mdp/firewire_abst/firewire_abst.props","mdp/firewire_abst/firewire_abst.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "rounds", PropertyType.EXPECTED_REWARD, {"delay": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 3})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "elected", PropertyType.REACHABILITY, {"delay": 36})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "rounds", PropertyType.EXPECTED_REWARD, {"delay": 36})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"delay": 36})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"delay": 36})
        BenchmarkInstance(sequence, {})
    
    def add_firewire_dl_1(self):
        model = BenchmarkModel(self, "mdp/firewire_dl/firewire_dl.jani","mdp/firewire_dl/firewire_dl.props","mdp/firewire_dl/firewire_dl.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 3, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 3, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 3, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 3, "deadline": 800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 36, "deadline": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 36, "deadline": 400})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 36, "deadline": 600})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"delay": 36, "deadline": 800})
        BenchmarkInstance(sequence, {})
    
    def add_ij_1(self):
        model = BenchmarkModel(self, "mdp/ij/ij.3.jani","mdp/ij/ij.3.props","mdp/ij/ij.3.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "stable", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_ij_2(self):
        model = BenchmarkModel(self, "mdp/ij/ij.10.jani","mdp/ij/ij.10.props","mdp/ij/ij.10.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "stable", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_ij_3(self):
        model = BenchmarkModel(self, "mdp/ij/ij.20.jani","mdp/ij/ij.20.props","mdp/ij/ij.20.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "stable", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_ij_4(self):
        model = BenchmarkModel(self, "mdp/ij/ij.30.jani","mdp/ij/ij.30.props","mdp/ij/ij.30.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "stable", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_ij_5(self):
        model = BenchmarkModel(self, "mdp/ij/ij.40.jani","mdp/ij/ij.40.props","mdp/ij/ij.40.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "stable", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_ij_6(self):
        model = BenchmarkModel(self, "mdp/ij/ij.50.jani","mdp/ij/ij.50.props","mdp/ij/ij.50.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "stable", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_pacman_1(self):
        model = BenchmarkModel(self, "mdp/pacman/pacman.jani","mdp/pacman/pacman.props","mdp/pacman/pacman.nm", ModelType.MDP,"PRISM","learned probabilities")
        sequence = BenchmarkSequence(model, "crash", PropertyType.REACHABILITY, {"MAXSTEPS": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "crash", PropertyType.REACHABILITY, {"MAXSTEPS": 60})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "crash", PropertyType.REACHABILITY, {"MAXSTEPS": 100})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_mdp_1(self):
        model = BenchmarkModel(self, "mdp/philosophers-mdp/philosophers-mdp.3.jani","mdp/philosophers-mdp/philosophers-mdp.3.props","mdp/philosophers-mdp/philosophers-mdp.3.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "eat", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_mdp_2(self):
        model = BenchmarkModel(self, "mdp/philosophers-mdp/philosophers-mdp.10.jani","mdp/philosophers-mdp/philosophers-mdp.10.props","mdp/philosophers-mdp/philosophers-mdp.10.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "eat", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_mdp_3(self):
        model = BenchmarkModel(self, "mdp/philosophers-mdp/philosophers-mdp.20.jani","mdp/philosophers-mdp/philosophers-mdp.20.props","mdp/philosophers-mdp/philosophers-mdp.20.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "eat", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_philosophers_mdp_4(self):
        model = BenchmarkModel(self, "mdp/philosophers-mdp/philosophers-mdp.30.jani","mdp/philosophers-mdp/philosophers-mdp.30.props","mdp/philosophers-mdp/philosophers-mdp.30.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "eat", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_pnueli_zuck_1(self):
        model = BenchmarkModel(self, "mdp/pnueli-zuck/pnueli-zuck.3.jani","mdp/pnueli-zuck/pnueli-zuck.props","mdp/pnueli-zuck/pnueli-zuck.3.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_pnueli_zuck_2(self):
        model = BenchmarkModel(self, "mdp/pnueli-zuck/pnueli-zuck.5.jani","mdp/pnueli-zuck/pnueli-zuck.props","mdp/pnueli-zuck/pnueli-zuck.5.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_pnueli_zuck_3(self):
        model = BenchmarkModel(self, "mdp/pnueli-zuck/pnueli-zuck.10.jani","mdp/pnueli-zuck/pnueli-zuck.props","mdp/pnueli-zuck/pnueli-zuck.10.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_pnueli_zuck_4(self):
        model = BenchmarkModel(self, "mdp/pnueli-zuck/pnueli-zuck.15.jani","mdp/pnueli-zuck/pnueli-zuck.props","mdp/pnueli-zuck/pnueli-zuck.15.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_rabin_1(self):
        model = BenchmarkModel(self, "mdp/rabin/rabin.3.jani","mdp/rabin/rabin.3.props","mdp/rabin/rabin.3.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_rabin_2(self):
        model = BenchmarkModel(self, "mdp/rabin/rabin.5.jani","mdp/rabin/rabin.5.props","mdp/rabin/rabin.5.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_rabin_3(self):
        model = BenchmarkModel(self, "mdp/rabin/rabin.10.jani","mdp/rabin/rabin.10.props","mdp/rabin/rabin.10.prism", ModelType.MDP,"PRISM","PRISM case study")
        sequence = BenchmarkSequence(model, "live", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_random_predicates_1(self):
        model = BenchmarkModel(self, "mdp/random-predicates/random-predicates.a.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_random_predicates_2(self):
        model = BenchmarkModel(self, "mdp/random-predicates/random-predicates.b.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_random_predicates_3(self):
        model = BenchmarkModel(self, "mdp/random-predicates/random-predicates.c.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_random_predicates_4(self):
        model = BenchmarkModel(self, "mdp/random-predicates/random-predicates.d.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_rectangle_tireworld_1(self):
        model = BenchmarkModel(self, "mdp/rectangle-tireworld/rectangle-tireworld.5.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_rectangle_tireworld_2(self):
        model = BenchmarkModel(self, "mdp/rectangle-tireworld/rectangle-tireworld.11.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_rectangle_tireworld_3(self):
        model = BenchmarkModel(self, "mdp/rectangle-tireworld/rectangle-tireworld.30.jani.gz","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_resource_gathering_1(self):
        model = BenchmarkModel(self, "mdp/resource-gathering/resource-gathering.jani","mdp/resource-gathering/resource-gathering.prctl","mdp/resource-gathering/resource-gathering.pm", ModelType.MDP,"PRISM","")
        sequence = BenchmarkSequence(model, "expgold", PropertyType.UNSUPPORTED, {"B": 200, "GOLD_TO_COLLECT": 15, "GEM_TO_COLLECT": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expsteps", PropertyType.EXPECTED_STEPS, {"B": 200, "GOLD_TO_COLLECT": 15, "GEM_TO_COLLECT": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prgoldgem", PropertyType.UNSUPPORTED, {"B": 200, "GOLD_TO_COLLECT": 15, "GEM_TO_COLLECT": 15})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expgold", PropertyType.UNSUPPORTED, {"B": 400, "GOLD_TO_COLLECT": 30, "GEM_TO_COLLECT": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expsteps", PropertyType.EXPECTED_STEPS, {"B": 400, "GOLD_TO_COLLECT": 30, "GEM_TO_COLLECT": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prgoldgem", PropertyType.UNSUPPORTED, {"B": 400, "GOLD_TO_COLLECT": 30, "GEM_TO_COLLECT": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expgold", PropertyType.UNSUPPORTED, {"B": 1300, "GOLD_TO_COLLECT": 100, "GEM_TO_COLLECT": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expsteps", PropertyType.EXPECTED_STEPS, {"B": 1300, "GOLD_TO_COLLECT": 100, "GEM_TO_COLLECT": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prgoldgem", PropertyType.UNSUPPORTED, {"B": 1300, "GOLD_TO_COLLECT": 100, "GEM_TO_COLLECT": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expgold", PropertyType.UNSUPPORTED, {"B": 1000000, "GOLD_TO_COLLECT": 0, "GEM_TO_COLLECT": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "expsteps", PropertyType.EXPECTED_STEPS, {"B": 1000000, "GOLD_TO_COLLECT": 0, "GEM_TO_COLLECT": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "prgoldgem", PropertyType.UNSUPPORTED, {"B": 1000000, "GOLD_TO_COLLECT": 0, "GEM_TO_COLLECT": 0})
        BenchmarkInstance(sequence, {})
    
    def add_tireworld_1(self):
        model = BenchmarkModel(self, "mdp/tireworld/tireworld.17.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_tireworld_2(self):
        model = BenchmarkModel(self, "mdp/tireworld/tireworld.25.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_tireworld_3(self):
        model = BenchmarkModel(self, "mdp/tireworld/tireworld.35.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_tireworld_4(self):
        model = BenchmarkModel(self, "mdp/tireworld/tireworld.45.jani","","", ModelType.MDP,"PPDDL","IPPC 2006 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_triangle_tireworld_1(self):
        model = BenchmarkModel(self, "mdp/triangle-tireworld/triangle-tireworld.9.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_triangle_tireworld_2(self):
        model = BenchmarkModel(self, "mdp/triangle-tireworld/triangle-tireworld.441.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_triangle_tireworld_3(self):
        model = BenchmarkModel(self, "mdp/triangle-tireworld/triangle-tireworld.1681.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_triangle_tireworld_4(self):
        model = BenchmarkModel(self, "mdp/triangle-tireworld/triangle-tireworld.3721.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_triangle_tireworld_5(self):
        model = BenchmarkModel(self, "mdp/triangle-tireworld/triangle-tireworld.6561.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_1(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.0.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.0.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_2(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.1.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.1.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_3(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.2.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.2.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_4(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.3.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.3.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_5(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.4.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.4.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_6(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.5.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.5.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_7(self):
        model = BenchmarkModel(self, "mdp/wlan/wlan.6.jani","mdp/wlan/wlan.props","mdp/wlan/wlan.6.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "cost_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "num_collisions", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "sent", PropertyType.REACHABILITY, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_max", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "time_min", PropertyType.EXPECTED_REWARD, {"COL": 0})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_1(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.0.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.0.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_2(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.1.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.1.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_3(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.2.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.2.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_4(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.3.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.3.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_5(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.4.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.4.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_6(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.5.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.5.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_dl_7(self):
        model = BenchmarkModel(self, "mdp/wlan_dl/wlan_dl.6.jani","mdp/wlan_dl/wlan_dl.props","mdp/wlan_dl/wlan_dl.6.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.REACHABILITY, {"deadline": 80})
        BenchmarkInstance(sequence, {})
    
    def add_zenotravel_1(self):
        model = BenchmarkModel(self, "mdp/zenotravel/zenotravel.4-2-2.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_zenotravel_2(self):
        model = BenchmarkModel(self, "mdp/zenotravel/zenotravel.6-5-3.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_zenotravel_3(self):
        model = BenchmarkModel(self, "mdp/zenotravel/zenotravel.10-5-3.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_zenotravel_4(self):
        model = BenchmarkModel(self, "mdp/zenotravel/zenotravel.20-10-6.jani","","", ModelType.MDP,"PPDDL","IPPC 2008 benchmark")
        sequence = BenchmarkSequence(model, "goal", PropertyType.REACHABILITY, {})
        BenchmarkInstance(sequence, {})
    
    def add_zeroconf_1(self):
        model = BenchmarkModel(self, "mdp/zeroconf/zeroconf.jani","mdp/zeroconf/zeroconf.props","mdp/zeroconf/zeroconf.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 2, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 2, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 4, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 4, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 6, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 6, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 8, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 8, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 2, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 2, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 4, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 4, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 6, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 6, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 8, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 8, "reset": True})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 2, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 2, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 4, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 4, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 6, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 6, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 20, "K": 8, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 20, "K": 8, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 2, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 2, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 4, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 4, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 6, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 6, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_max", PropertyType.REACHABILITY, {"N": 1000, "K": 8, "reset": False})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "correct_min", PropertyType.REACHABILITY, {"N": 1000, "K": 8, "reset": False})
        BenchmarkInstance(sequence, {})
    
    def add_zeroconf_dl_1(self):
        model = BenchmarkModel(self, "mdp/zeroconf_dl/zeroconf_dl.jani","mdp/zeroconf_dl/zeroconf_dl.props","mdp/zeroconf_dl/zeroconf_dl.prism", ModelType.MDP,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 40})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 40})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": True, "deadline": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 30})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 40})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 40})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.REACHABILITY, {"N": 1000, "K": 1, "reset": False, "deadline": 50})
        BenchmarkInstance(sequence, {})
    
    def add_brp_pta_1(self):
        model = BenchmarkModel(self, "pta/brp-pta/brp-pta.jani","","", ModelType.PTA,"Modest","scalable in multiple dimensions")
        sequence = BenchmarkSequence(model, "T_1", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_2", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_A1", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_A2", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_A", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_B", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_1", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_2", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_3", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_4", PropertyType.REACHABILITY, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Dmax", PropertyType.UNSUPPORTED, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Dmin", PropertyType.UNSUPPORTED, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Emax", PropertyType.EXPECTED_TIME, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Emin", PropertyType.EXPECTED_TIME, {"N": 16, "MAX": 2, "TD": 1, "TIME_BOUND": 64})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_1", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_2", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_A1", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "T_A2", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_A", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_B", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_1", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_2", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_3", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_4", PropertyType.REACHABILITY, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Dmax", PropertyType.UNSUPPORTED, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Dmin", PropertyType.UNSUPPORTED, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Emax", PropertyType.EXPECTED_TIME, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "Emin", PropertyType.EXPECTED_TIME, {"N": 64, "MAX": 12, "TD": 32, "TIME_BOUND": 256})
        BenchmarkInstance(sequence, {})
    
    def add_csma_pta_1(self):
        model = BenchmarkModel(self, "pta/csma-pta/csma-pta.jani","pta/csma-pta/csma-pta.props","pta/csma-pta/csma-pta.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"K": 2, "COL": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"K": 2, "COL": 8})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"K": 4, "COL": 4})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "collisions", PropertyType.REACHABILITY, {"K": 4, "COL": 8})
        BenchmarkInstance(sequence, {})
    
    def add_csma_abst_pta_1(self):
        model = BenchmarkModel(self, "pta/csma_abst-pta/csma_abst-pta.jani","pta/csma_abst-pta/csma_abst-pta.props","pta/csma_abst-pta/csma_abst-pta.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"K": 1, "T": 1000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"K": 1, "T": 1000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"K": 1, "T": 1000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"K": 1, "T": 1750})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"K": 1, "T": 1750})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"K": 1, "T": 1750})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"K": 1, "T": 1800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"K": 1, "T": 1800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"K": 1, "T": 1800})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"K": 1, "T": 2000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"K": 1, "T": 2000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"K": 1, "T": 2000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"K": 1, "T": 3000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"K": 1, "T": 3000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"K": 1, "T": 3000})
        BenchmarkInstance(sequence, {})
    
    def add_firewire_pta_1(self):
        model = BenchmarkModel(self, "pta/firewire-pta/firewire-pta.jani","pta/firewire-pta/firewire-pta.props","pta/firewire-pta/firewire-pta.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 30, "T": 2500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 2500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 30, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 30, "T": 7500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 7500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 360, "T": 2500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 2500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 360, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"delay": 360, "T": 7500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 7500})
        BenchmarkInstance(sequence, {})
    
    def add_firewire_abst_pta_1(self):
        model = BenchmarkModel(self, "pta/firewire_abst-pta/firewire_abst-pta.jani","pta/firewire_abst-pta/firewire_abst-pta.props","pta/firewire_abst-pta/firewire_abst-pta.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 30, "T": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 30, "T": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 30, "T": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 30, "T": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 30, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 30, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 30, "T": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 30, "T": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 30, "T": 15000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 30, "T": 15000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 30, "T": 15000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 360, "T": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 360, "T": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 50})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 360, "T": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 360, "T": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 500})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 360, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 360, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 5000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 360, "T": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 360, "T": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 10000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_max", PropertyType.UNSUPPORTED, {"delay": 360, "T": 15000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline_min", PropertyType.UNSUPPORTED, {"delay": 360, "T": 15000})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"delay": 360, "T": 15000})
        BenchmarkInstance(sequence, {})
    
    def add_repudiation_honest_1(self):
        model = BenchmarkModel(self, "pta/repudiation_honest/repudiation_honest.jani","pta/repudiation_honest/repudiation_honest.props","pta/repudiation_honest/repudiation_honest.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 40})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"T": 40})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 80})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"T": 80})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"T": 100})
        BenchmarkInstance(sequence, {})
    
    def add_repudiation_malicious_1(self):
        model = BenchmarkModel(self, "pta/repudiation_malicious/repudiation_malicious.jani","pta/repudiation_malicious/repudiation_malicious.props","pta/repudiation_malicious/repudiation_malicious.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"T": 5})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"T": 10})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 20})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "eventually", PropertyType.REACHABILITY, {"T": 20})
        BenchmarkInstance(sequence, {})
    
    def add_wlan_large_1(self):
        model = BenchmarkModel(self, "pta/wlan-large/wlan-large.jani","","", ModelType.PTA,"Modest","")
        sequence = BenchmarkSequence(model, "P_1", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_min", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "P_max", PropertyType.REACHABILITY, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "D_and", PropertyType.UNSUPPORTED, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "D_or", PropertyType.UNSUPPORTED, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "D_1", PropertyType.UNSUPPORTED, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "E_and", PropertyType.EXPECTED_TIME, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "E_or", PropertyType.EXPECTED_TIME, {"K": 2})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "E_1", PropertyType.EXPECTED_REWARD, {"K": 2})
        BenchmarkInstance(sequence, {})
    
    def add_zeroconf_pta_1(self):
        model = BenchmarkModel(self, "pta/zeroconf-pta/zeroconf-pta.jani","pta/zeroconf-pta/zeroconf-pta.props","pta/zeroconf-pta/zeroconf-pta.prism", ModelType.PTA,"PRISM","PRISM benchmark")
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "incorrect", PropertyType.REACHABILITY, {"T": 100})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 150})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "incorrect", PropertyType.REACHABILITY, {"T": 150})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "deadline", PropertyType.UNSUPPORTED, {"T": 200})
        BenchmarkInstance(sequence, {})
        sequence = BenchmarkSequence(model, "incorrect", PropertyType.REACHABILITY, {"T": 200})
        BenchmarkInstance(sequence, {})
